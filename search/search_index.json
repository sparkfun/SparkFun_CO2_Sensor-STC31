{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"arduino_examples/","title":"Arduino Examples","text":"<p>Let's take a closer look at a few of the examples included in the STC3x Arduino Library</p>"},{"location":"arduino_examples/#example-01-basic-readings","title":"Example 01 - Basic Readings","text":"<p>The first example demonstrates how to get basic CO<sub>2</sub> data from the sensor along with temperature measurements from the on-chip temperature sensor. It initializes the STC31 with default settings to measure CO<sub>2 in air up to 25% concentration. Open the example by navigating to File &gt; Libraries &gt; SparkFun STC3x Arduino Library &gt; Example1_BasicReadings. Select your Board (Sparkfun RedBoard IoT if you're following along to the letter) and Port and click the \"Upload\" button. After the code finishes uploading, open the serial monitor with the baud set to 115200 and you should see CO<sub>2</sub> concentrations and temperature (in \u00b0C) print out every second. Try breathing on the sensor and you should see the values move slightly (we only breath out roughly 4% CO<sub>2</sub>). <p>Code to Note</p> <p>The STC31 has four measurement modes to adjust what gas/environment it's measuring in along with the percentage volume of CO<sub>2</sub>. Possible values for <code>setBinaryGas</code> are</p> <pre><code>  //  STC3X_BINARY_GAS_CO2_N2_100   : Set binary gas to CO2 in N2.  Range: 0 to 100 vol%\n  //  STC3X_BINARY_GAS_CO2_AIR_100  : Set binary gas to CO2 in Air. Range: 0 to 100 vol%\n  //  STC3X_BINARY_GAS_CO2_N2_25    : Set binary gas to CO2 in N2.  Range: 0 to 25 vol%\n  //  STC3X_BINARY_GAS_CO2_AIR_25   : Set binary gas to CO2 in Air. Range: 0 to 25 vol%\n\n  if (mySensor.setBinaryGas(STC3X_BINARY_GAS_CO2_AIR_25) == false)\n  {\n    Serial.println(F(\"Could not set the binary gas! Freezing...\"));\n    while (1)\n</code></pre>"},{"location":"arduino_examples/#example-02-pht-compensation","title":"Example 02 - PHT Compensation","text":"<p>The second example shows how to use the SHTC3 to send actual temperature and humidity data to the STC31 to improve the accuracy of the CO<sub>2</sub> data from the sensor. The example initializes the STC31 to measure in air at concentrations up to 25% volume, sets the temperature and humidity values to those measured by the SHTC3 and then sets the barometric pressure to an arbitrary value (840 millibars). Open the example by navigating to File &gt; Libraries &gt; SparkFun STC3x Arduino Library &gt; Example2_PHTCompensation. After uploading, open the serial monitor with the baud set to 115200 and you should see the values set for pressure, temperature and humidity followed by CO<sub>2</sub> measurements print out every second:</p> <p></p> <p>Code to Note</p> <p>Since we don't have a pressure sensor to provide real-time pressure data the example sets the barometric pressure to match the pressure at SparkFun headquarters (840 millibars). You'll most likely want to adjust this value to the pressure in millibars (mbar) to your location. For example, typical barometric pressure at sea level is typically ~1013 millibars.</p> <pre><code>  //If we have a pressure sensor available, we can compensate for ambient pressure too.\n  //As an example, let's set the pressure to 840 mbar (== SF Headquarters)\n  uint16_t pressure = 840;\n</code></pre>"},{"location":"arduino_examples/#example-05-automatic-self-calibration","title":"Example 05 - Automatic Self Calibration","text":"<p>The fifth example demonstrates how to enable the STC31's automatic self calibration feature. Automatic calibration helps improve the STC31's accuracy when used in applications where the target gas is not present most of the time. Refer to the STC31 Field Calibration Guide for more information. Open the example by navigating to File &gt; Libraries &gt; SparkFun STC3x Arduino Library &gt; Example5_AutomaticSelfCalibration. Once the code upload completes, open the serial monitor with the baud set to 115200 and after the sensor initializes, you should see \"Forced Recalibration was successful\" print out followed by \"Automatic self calibration is enabled!\". After these prints, the code will begin to print out CO<sub>2</sub> and temperature data from the STC31 once every second.</p> <p>Code to Note</p> <p>Before running the STC31 in automatic calibration mode, the example attempts to perform a forced recalibration with a concentration of 0%. This is used to improve the sensor's accuracy with a known reference value.</p> <pre><code>if (mySensor.forcedRecalibration(0.0) == true) // Force a recalibration with a concentration of 0%\n  {\n    Serial.println(F(\"Forced Recalibration was successful!\"));\n  }\n  else\n  {\n    Serial.println(F(\"Forced Recalibration FAILED! Please check the debug messages for more details\"));\n  }\n</code></pre>"},{"location":"arduino_setup/","title":"STC3x Arduino Library Setup","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> <li>Installing Board Definitions in the Arduino IDE</li> </ul>"},{"location":"arduino_setup/#installing-the-sparkfun-stc3x-and-shtc3-arduino-libraries","title":"Installing the SparkFun STC3x and SHTC3 Arduino Libraries","text":"<p>The SparkFun STC3x Arduino library helps you configure and get CO<sub>2</sub> data from the STC31 sensor. Install the libraries using the Arduino Library Manager tool by searching for \"SparkFun STC3x\" and \"SparkFun SHTC3\" and install the latest versions. If you'd prefer to manually install the libraries, you can download them from the GitHub Repository (STC3x Library and SHTC3 Library) or you can download a ZIP of the repositories here: STC3x Library (ZIP) and SHTC3 Library (ZIP)</p>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":"<p>Now that we're familiar with the hardware on this Qwiic breakout, let's assemble it into a Qwiic circuit and start getting environmental data from the STC31.</p>"},{"location":"hardware_assembly/#qwiic-assembly","title":"Qwiic Assembly","text":"<p>The Qwiic system allows solderless connections for power and I<sup>2</sup>C so all you need to get up and running is a Qwiic cable and Qwiic compatible development board (or a Qwiic adapter cable). Assemble your Qwiic circuit by connecting the CO2 Sensor - STC31 to your development board with the Qwiic cable and then connecting the development board to your computer over USB like the photo below shows:</p> <p></p>"},{"location":"hardware_assembly/#soldered-assembly","title":"Soldered Assembly","text":"<p>Users who prefer a traditional soldered assembly should solder wires or header pins to the PTH header on the side of the board. If you're not familiar with through-hole soldering or would like a refresher, take a look at our Through-Hole Soldering Tutorial.</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>Let's take a closer look at the STC31 CO<sub>2</sub>, SHTC3 temperature and humidity sensor and other hardware on the SparkFun CO2 Sensor - STC31 breakout.</p> <p></p>"},{"location":"hardware_overview/#stc31-co2-sensor","title":"STC31 CO<sub>2</sub> Sensor","text":"<p>The STC31 CO<sub>2</sub> sensor from Sensirion uses Sensirion's patented CMOSens<sup>\u00ae</sup> technology. The STC31 has four operating modes to measure CO<sub>2</sub> concentrations from either 0 to 25% volume or 0 to 100% volume in either nitrogen gas (N<sub>2</sub>) or air (Earth's atmospheric mix of 78.1% N<sub>2</sub>, 21.0&amp; O<sub>2</sub> and 0.9% Ar). When measuring CO<sub>2</sub> from 0 to 25% volume the sensor has an accuracy of 0.5% volume + 3% of the measured value. When measuring between 0 and 100% volume the accuracy is 1% volume + 3% of the measured value.</p> <p>It also has an integrated temperature sensor with a measurement range between -20\u00b0C to 85\u00b0C and an accuracy of 0.5\u00b0C (measuring between 10 to 50\u00b0C) and 1.5\u00b0C when measuring over the entire temperature range.</p> <p>The STC31 communicates over I<sup>2</sup>C  with clock frequencies from 400 to 1000kHz. The sensor has four possible I<sup>2</sup>C addresses that are set on the board using the address jumpers covered below. The default address is 0x29</p>"},{"location":"hardware_overview/#shtc3-humidity-and-temperature-sensor","title":"SHTC3 Humidity and Temperature Sensor","text":"<p>The STC31 requires temperature and humidity data to get the best CO<sub>2</sub> concentration accuracy so we've included the SHTC3 humidity and temperature sensor on the board to provide real time data for both values to the STC31. We chose the SHTC3 both for its accuracy, low power consumption and also because it uses Sensirion's CMOSens technology. The SHTC3 has a temperature measurement range of -40\u00b0C to 125\u00b0C with an average accuracy of \u00b10.2\u00b0C. The SHTC3 measures relative humidity between 0 to 100&amp;RH with an average accuracy of \u00b12.0%RH.</p> <p>The SHTC3 communicates over I<sup>2</sup>C and its I<sup>2</sup>C address is 0x70.</p>"},{"location":"hardware_overview/#qwiic-pths","title":"Qwiic &amp; PTHs","text":"<p>This breakout has a pair of Qwiic connectors as well as a 0.1\"-spaced PTH header that all connect to the STC31 and SHTC3's power and I<sup>2</sup>C pins (VDD/3.3V, Ground, SDA and SCL).</p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>The two sensors on the board are powered with 3.3V through either of the Qwiic connectors or via the 3.3V and GND PTH pins. When using the 3.3V PTH make sure the supply voltage does not exceed 3.6V as that can damage the SHTC3 sensor.</p>"},{"location":"hardware_overview/#led","title":"LED","text":"<p>The sole LED on this breakout is the red Power LED. As the name suggests, this LED indicates when the board is powered on.</p>"},{"location":"hardware_overview/#solder-jumpers","title":"Solder Jumpers","text":"<p>The CO<sub>2</sub> Sensor - STC31 has five solder jumpers on the board. The group of three jumpers labeled ADDR adjust the I<sup>2</sup>C address of the STC31 to the matching address name (0x2A, 0x2B and 0x2C). All three of these jumpers are OPEN by default and set the STC31's I<sup>2</sup>C address to 0x29. Only close one at a time to change the address to the matching name. The jumper labeled LED completes the power LED circuit and is CLOSED by default. Open the jumper to disable the power LED to help reduce the total current drawn by the board. The jumper labeled I<sup>2</sup>C pulls the I<sup>2</sup>C lines (SDA and SCL) to 3.3V through a pair of 2.2k\u03a9 resistors. Open this three-way jumper completely to disable the pullup resistors on those lines if necessary.</p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>This breakout matches the standard Qwiic form factor and measures 1\" x 1\" (25.4mm x 25.4mm) and has four mounting holes that fit a 4-40 screw.</p>"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun CO2 Sensor - STC31 is a Qwiic breakout featuring the STC31 CO<sub>2</sub> and SHTC3 Temperature and Humidity sensors from Sensirion<sup>\u00ae</sup> to accurately measure CO<sub>2</sub> concentrations up to 100% with high repeatability and long-term stability with humidity and temperature compensation via the built-in SHTC3. </p> <p>The STC3x sensor family is Sensirion\u2019s series of Gas Concentration sensors designed for high-volume applications. The STC3x utilizes a revolutionized thermal conductivity measurement principle, which results in superior repeatability and long-term stability. This makes the STC31 a perfect choice for applications where reliability is key. The outstanding performance of these sensors is based on Sensirion\u2019s patented CMOSens<sup>\u00ae</sup> sensor technology, which combines the sensor element, signal processing and digital calibration on a small CMOS chip. The well-proven CMOS technology is perfectly suited for high-quality mass production and is the ideal choice for demanding and cost-sensitive OEM applications.</p> <p>This guide covers how to get CO2 and other environmental readings from the STC31 using both Arduino and MicroPython when connecting the CO2 Sensor Breakout to a compatible development board over Qwiic. In order to follow along with this guide you'll need the CO2 Sensor - STC31 along with the following materials:</p> <ul> <li>SparkFun IoT RedBoard - ESP32 MicroPython Development Board (or other Arduino/MicroPython development board)</li> <li>Qwiic Cable</li> <li>USB-C Cable </li> </ul> <p>If you prefer a soldered connection, you may need one or more of these materials along with a soldering iron and solder:</p> <ul> <li>Breakaway Headers Straight</li> <li>Jumper Wires - Connected 6\" (M/M, 20 pack)</li> <li>Breadboard</li> </ul>"},{"location":"introduction/#topics-covered","title":"Topics Covered","text":"<p>This document contains three main sections: Quickstart Guide, Hardware and Software. </p> <p>The Quickstart Guide assumes a working knowledge of how to use a development board and the required software to program them for your project's needs. It covers a quick assembly and then jumps right into getting the necessary software packages installed to start getting spectral data in just a few short minutes.</p> <p>The Hardware pages are split into the Hardware Overview and Hardware Assembly. The Hardware Overview provides a detailed overview of the CO2 Sensor - STC31 along with all the major components included on the board. Refer to this page for information on things like the STC31, LEDs, pinout and solder jumpers. The Hardware Assembly page covers how to assemble the breakout in both a Qwiic circuit.</p> <p>The Software pages are split into sections covering the SparkFun STC31 Arduino Library and STCx Python driver. Each software page gives instructions on how to download install the software package (Arduino library or Python driver), as well as detailed looks at the examples included in the software packages.</p>"},{"location":"introduction/#additional-resources","title":"Additional Resources","text":"<p>You'll find the board design files (KiCad files &amp; schematic), relevant documentation (datasheets, white papers, etc.) and other helpful links on the Resources page. Lastly, the Support section includes a Troubleshooting page that includes any helpful tips specific to this board as well as information on how to receive technical support from SparkFun.</p>"},{"location":"python_examples/","title":"Python Examples","text":""},{"location":"python_examples/#example-01-basic-readings","title":"Example 01 - Basic Readings","text":"<p>Example 1 shows how to get basic CO<sub>2</sub> and temperature data from the STC31. It initializes the sensor with default settings to measure CO<sub>2</sub> in air up to 25% concentration. Open the example in your preferred Python interpreter and run it. You should see some initialization messages print out followed by CO<sub>2</sub> concentration and temperature data every second. Try breathing on the sensor or holding it up to a different CO<sub>2</sub>C source and you should see the values change.</p> <p>Code to Note</p> <p>The STC31 has four different measurement modes available for the <code>set_binary_gas()</code> function. This lets you change between measuring either up to 25% or 100% CO<sub>2</sub> concentration measured either in nitrogen (N<sub>2</sub>) or air. You can adjust the measurement mode by modifying the line of code below with the corresponding concentration/gas:</p> <pre><code>    # Possible values are:\n    # kBinaryGasCO2N2_100   : Set binary gas to CO2 in N2.  Range: 0 to 100 vol%\n    # kBinaryGasCO2Air_100  : Set binary gas to CO2 in Air. Range: 0 to 100 vol%\n    # kBinaryGasCO2N2_25    : Set binary gas to CO2 in N2.  Range: 0 to 25 vol%\n    # kBinaryGasCO2Air_25   : Set binary gas to CO2 in Air. Range: 0 to 25 vol%\n    if mySTC31.set_binary_gas(mySTC31.kBinaryGasCO2Air_25):\n</code></pre>"},{"location":"python_examples/#example-02-pht-compensation","title":"Example 02 - PHT Compensation","text":"<p>The second example shows how set values for temperature, humidity and pressure to improve the accuracy of the CO<sub>2</sub> data. The example initializes the STC31 to measure in air at concentrations up to 25% volume and then sets the temperature, humidity and barometric pressure to fixed reference values.</p> <p>Code to Note</p> <p>As mentioned above, this example sets static compensation values for temperature, pressure and humidity. You may want to adjust these values for your testing environment:</p> <pre><code>    # These are example compensation variables and you can change them as needed to fit your environment\n    pressure = 840\n    humidity = 25\n    temperature = 25\n</code></pre>"},{"location":"python_examples/#example-05-self-calibration","title":"Example 05 - Self Calibration","text":"<p>Example 5 demonstrates how to enable the STC31's automatic self calibration feature as well as how to perform a forced recalibration. Automatic calibration helps improve the STC31's accuracy when used in applications where the target gas is not present most of the time. Refer to the STC31 Field Calibration Guide for more information on calibrating the STC31.</p> <p>After initializing the sensor, the code attempts to perform a forced recalibration of the STC31 with a CO<sub>2</sub> value of 0. After performing the forced recalibration, the code enables the STC31's automatic calibration feature and then prints out CO<sub>2</sub> and temperature data every second.</p>"},{"location":"python_setup/","title":"STC3x Python Package Setup","text":"<p>The SparkFun STC3x Python Package is based off the Arduino libraries for the STX3x family of CO<sub>2</sub> sensors from Sensirion<sup>\u2122</sup>. It works for Python, MicroPython and CircuitPython so you can choose which \"flavor\" of Python to use. This section goes over how to install the package in each supported Python environment along with the necessary tools for installation and running examples.</p>"},{"location":"python_setup/#python-installation","title":"Python Installation","text":"<p>For users on a Linux-based system (Raspberry Pi, etc.), install this package in Python with PyPi using the <code>pip3</code> command with the following steps:</p> <ul> <li>Set up a virtual environment from a specific directory using <code>venv</code>: `python3 -m venv path/to/venv (You can use any path here just remember to use the same one for each step).</li> <li>Install the Qwiic package: `path/to/venv/bin/pip3 install sparkfun-qwiic-stcx</li> </ul> <p>That's it. Now you can run any example (or your own custom scripts) by running it with a command like: <code>path/to/venv/bin</code></p>"},{"location":"python_setup/#micropython-installation","title":"MicroPython Installation","text":"<p>If you prefer to use MicroPython to run the examples on a microcontroller running MicroPython, follow these steps to install the package on your computer:</p> <ul> <li>Install mpremote on your computer.</li> <li>Connect the IoT RedBoard - ESP32 (or other MicroPython device) to your computer and install the package directly using mpremote mip: <code>mpremote mip install github:sparkfun/qwiic_stcx_py</code></li> <li>Install the examples to the IoT RedBoard with the following mip command: <code>mpremote mip install github:sparkfun/qwiic_stcx_py@examples</code></li> </ul>"},{"location":"python_setup/#circuitpython-installation","title":"CircuitPython Installation","text":"<p>Lastly, users who prefer CircuitPython can install the package with the following steps:</p> <ul> <li>Install CircUp on your computer.</li> <li>Make sure you have the latest version of the SparkFun Qwiic CircuitPython module installed with this command: <code>circup bundle-add sparkfun/Qwiic_py</code></li> <li>Connect your CircuitPython device to your computer and install the package to the device with circup: <code>circup install --py qwiic_stcx</code></li> </ul> <p>If you want to install specific examples from the repository, use the corresponding circup command from below:</p> <p><pre><code>circup example qwiic_stc3x\\qwiic_stc3x_ex1_basic\ncircup example qwiic_stc3x\\qwiic_stc3x_ex2_PHT_compensation\ncircup example qwiic_stc3x\\qwiic_stc3x_ex4_self_test\ncircup example qwiic_stc3x\\qwiic_stc3x_ex5_auto_calibration\n</code></pre> Note, the syntax used here are for Windows commands; Linux and Mac have different path separators. Refer to the CircUp \"example command documentation for more information.</p>"},{"location":"quickstart/","title":"Quick Start","text":"<p>In this Quick Start guide we'll connect the SparkFun CO2 Sensor - STC31 to a SparkFun IoT RedBoard - ESP32 and use the SparkFun STC31 and SHTC3 Arduino libraries to report environmentally compensated CO<sub>2</sub> percentages. This example takes the humidity and temperature data reported by the SHTC3 environmental sensor on the breakout and feeds them to the STC31 to provide accurate CO<sub>2</sub> measurements that are compensated with live environmental data.</p> <p>If you're not familiar with using sensor breakouts, development boards or the development environments covered in this guide, refer to the Hardware &amp; Arduino sections of this Hookup Guide for a detailed overview of the board along with instructions on setting up and using the SparkFun STC31 and SHTC3 Arduino Libraries.</p>"},{"location":"quickstart/#basic-assembly","title":"Basic Assembly","text":"<p>Since this is a Qwiic breakout, assembling the circuit only requires connecting the sensor breakout to a Qwiic-compatible development board like the IoT RedBoard - ESP32. Connect the STC31 Breakout to the IoT RedBoard with a Qwiic cable and then connect the RedBoard to your computer with a USB-C cable like the photo below:</p> <p></p>"},{"location":"quickstart/#arduino-example-pht-compensation","title":"Arduino Example - PHT Compensation","text":"<p>This Arduino example prints out CO<sub>2</sub> concentration percentages compensated with humidity and temperature data measured by the SHTC3 along with a static value for barometric pressure.</p> <ul> <li>Open the Arduino IDE.</li> <li>Install the SparkFun STC31 and STHC3 Arduino libraries with the Arduino Library Manager. Open the tool and search for \"SparkFun STC31\" and \"SparkFun SHTC3\". Make sure to install the latest releases.</li> <li>If necessary, install board definitions for the IoT RedBoard - ESP32. Open the Board Manager and search for \"ESP32\" to install the latest release of espressif's ESP32 boards package.</li> <li>Open the example in Arduino by navigating to File &gt; Libraries &gt; SparkFun STC31 Arduino Library &gt; Example2_PHTCompensation.</li> <li>Select your Board and Port and click \"Upload\".</li> <li>Once the code finishes compiling and uploading, open the serial monitor with the baud set to 115200 and you should see a printout of the values set for temperature, humidity and pressure followed by values for CO<sub>2</sub> concentration percentage every second like the screenshot below:</li> </ul> <p></p> <p>Code to Note</p> <p>The STC31 has four measurement modes to adjust what gas/environment it's measuring in along with the percentage volume of CO<sub>2</sub>. The examples all default to measure up to 25% volume in air. Possible values for <code>setBinaryGas()</code> are listed in the code comment below:</p> <pre><code>  //  STC3X_BINARY_GAS_CO2_N2_100   : Set binary gas to CO2 in N2.  Range: 0 to 100 vol%\n  //  STC3X_BINARY_GAS_CO2_AIR_100  : Set binary gas to CO2 in Air. Range: 0 to 100 vol%\n  //  STC3X_BINARY_GAS_CO2_N2_25    : Set binary gas to CO2 in N2.  Range: 0 to 25 vol%\n  //  STC3X_BINARY_GAS_CO2_AIR_25   : Set binary gas to CO2 in Air. Range: 0 to 25 vol%\n\n  if (mySensor.setBinaryGas(STC3X_BINARY_GAS_CO2_AIR_25) == false)\n  {\n    Serial.println(F(\"Could not set the binary gas! Freezing...\"));\n    while (1)\n</code></pre> <p>Since we don't have a pressure sensor to provide real-time pressure data the example sets the barometric pressure to match the pressure at SparkFun headquarters (840 millibars). You'll most likely want to adjust this value to the pressure in millibars (mbar) to your location. For example, typical barometric pressure at sea level is typically ~1013 millibars.</p> <pre><code>  //If we have a pressure sensor available, we can compensate for ambient pressure too.\n  //As an example, let's set the pressure to 840 mbar (== SF Headquarters)\n  uint16_t pressure = 840;\n</code></pre>"},{"location":"resources/","title":"Resources","text":"<p>For more information on the SparkFun CO2 Sensor - STC31, take a look at the following resources:</p> <ul> <li>Schematic</li> <li>KiCad Files</li> <li>Datasheet (STC31)</li> <li>Field Calibration Note (STC31)</li> <li>Datasheet (SHTC3)</li> <li>SparkFun STCx Arduino Library</li> <li>SparkFun Qwiic STCx Python Package</li> <li>GitHub Repository</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#power-consumption-tips","title":"Power Consumption Tips","text":"<p>If you're looking to optimize this breakout board to pull as little current as possible we recommend starting by opening the LED solder jumper to disable the power LED. To further reduce the current draw, you'll want to refer to the datasheet for complete information on power consumption with various settings.</p>"},{"location":"troubleshooting/#general-troubleshooting","title":"General Troubleshooting","text":"<p>Info</p> <p><p> Not working as expected and need help? </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> SparkFun Technical Assistance Page <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.<p></p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun CO2 Sensor - STC31 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun CO2 Sensor - STC31 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun CO2 Sensor - STC31 repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun CO2 Sensor - STC31 repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"}]}